--Vector class
local Vector = {}

--Forward declarations
isVector = function() end
local getType = function() end

function Vector:new(a,y,z,f)
	local o = {}

	if type(a) == "table" then
		o = a
	elseif y ~= nil then
		o = {x=a,y=y,z=z,f=f}
	else
		o = {x=0,y=0,z=0,f=0}
	end
	setmetatable(o,self)
	self.__index = self
	return o
end


--MetaMethods
function Vector:__tostring()
	return "{x=".. (self.x or 0) ..",y=".. (self.y or 0) ..",z=".. (self.z or 0) ..",f=".. (self.f or 0).."}"
end

function Vector.__add(a,b)
	if type(b) == "number" and isVector(a) then
		return a:scalarAdd(b)
	elseif type(a) == "number" and isVector(b) then
		return b:scalarAdd(a)
	elseif isVector(a) and isVector(b) then
		return a:add(b)
	else
		error("Attempt to perform vector addition on <"..getType(a).."> and <"..getType(b)..">")
	end
end

function Vector.__unm(v)
	return v:scalarMultiply(-1)
end

function Vector.__sub(a,b)
	if type(b) == "number" and isVector(a) then
		return a:scalarSubtract(b)
	elseif type(a) == "number" and isVector(b) then
		return b:scalarSubtract(a)
	elseif isVector(a) and isVector(b) then
		return a:subtract(b)
	else
		error("Attempt to perform vector subtraction on <".. getType(a).."> and <"..getType(b)..">")
	end
end

function Vector.__mul(a,b)
	if type(b) == "number" and isVector(a) then
		return a:scalarMultiply(b)
	elseif type(a) == "number" and isVector(b) then
		return b:scalarMultiply(a)
	elseif	isVector(a) and isVector(b) then
		return a:multiply(b)
	else
		error("Attempt to perform vector multiplication on <"..getType(a).."> and <"..getType(b)..">")
	end
end

function Vector.__div(a,b)
	if type(b) == "number" and isVector(a) then
		return a:scalarMultiply(b)
	elseif type(a) == "number" and isVector(b) then
		return b:scalarMultiply(a)
	elseif	isVector(a) and isVector(b) then
		return a:divide(b)
	else
		error("Attempt to perform vector division on <" ..getType(a).."> and <" ..getType(b)..">")
	end
end

function Vector.__eq(a,b)
	return a:equals(b)
end

--Methods
function Vector:add(v)
	--Add vector v to self, return resulting Vector
	return Vector:new(self.x + v.x, self.y + v.y, self.z + v.z)
end

function Vector:scalarAdd(n)
	return Vector:new(self.x + n, self.y + n, self.z + n)
end

function Vector:subtract(v)
	return Vector:new(self.x - v.x, self.y - v.y, self.z - v.z)
end

function Vector:scalarSubtract(n)
	return Vector:new(self.x - n, self.y - n, self.z - n)
end

function Vector:multiply(v)
	return Vector:new(self.x * v.x, self.y * v.y, self.z * v.z)
end

function Vector:scalarMultiply(n)
	return Vector:new(self.x * n, self.y * n, self.z * n)
end

function Vector:divide(v)
	return Vector:new(self.x / v.x, self.y / v.y, self.z / v.z)
end

function Vector:scalarDivide(n)
	return Vector:new(self.x / n, self.y/n, self.z/n)
end

function Vector:length()
	return math.sqrt(self.x * self.x + self.y * self.y + self.z * self.z)
end

function Vector:lengthSq()
	return (self.x * self.x + self.y * self.y + self.z * self.z)
end

function Vector:distance(v)
	return math.sqrt(
		math.pow(v.x - self.x,2) +
		math.pow(v.y - self.y,2) +
		math.pow(v.z - self.z,2))
end

function Vector:distanceSq(v)
	return
		math.pow(v.x - self.x,2) +
		math.pow(v.y - self.y,2) +
		math.pow(v.z - self.z,2)
end

function Vector:normalize()
	return self:scalarDivide(self:length())
end

function Vector:dot(v)
	return (self.x * v.x + self.y * v.y + self.z * v.z)
end

function Vector:cross(v)
	return Vector:new(
		self.y * v.z - self.z * v.y,
		self.z * v.x - self.x * v.z,
		self.x * v.y - self.y * v.x)
end

function Vector:containedWithin(min,max)
	return (self.x >= min.x and self.x <= max.x
		and self.y >= min.y and self.y <= max.y
		and self.z >= min.z and self.z <= max.z)
end

function Vector:clampX(min,max)
	return Vector:new(math.max(min,math.min(max,self.x)),self.y,self.z)
end

function Vector:clampY(min,max)
	return Vector:new(self.x,math.max(min,math.min(max,self.y)),self.z)
end

function Vector:clampZ(min,max)
	return Vector:new(self.x,self.y,math.max(min,math.min(max,self.x)))
end

function Vector:floor()
	return Vector:new(math.floor(self.x),
					math.floor(self.y),
					math.floor(self.z))
end

function Vector:ceil()
	return Vector:new(math.ceil(self.x),
					math.ceil(self.y),
					math.ceil(self.z))
end

function Vector:round()
	return Vector:new(
			math.floor(self.x + 0.5),
			math.floor(self.y + 0.5),
			math.floor(self.z + 0.5))
end

function Vector:absolute()
	return Vector:new(math.abs(self.x),math.abs(self.y),math.abs(self.z))
end

function Vector:isCollinearWith(v)
	if self.x == 0 and self.y == 0 and self.z == 0 then
		return true
	end
	local otherX, otherY, otherZ = v.x, v.y, v.z
	if otherx == 0 and otherY == 0 and otherZ == 0 then
		return true
	end
	if (self.x == 0) ~= (otherX == 0) then return false end
	if (self.y == 0) ~= (otherY == 0) then return false end
	if (self.z == 0) ~= (otherZ == 0) then return false end
	local quotientX = otherX / self.x
	if quotientX == quotientX then
		return v:equals(self:scalarMultiply(quotientX))
	end
	local quotientY = otherY/ self.y
	if quotientY == quotientY then
		return v:equals(self:scalarMultiply(quotientY))
	end
	local quotientZ = otherZ / self.z
	if quotientZ == quotientZ then
		return v:equals(self:scalarMultiply(quotientZ))
	end
end

function Vector:getIntermediateWithX(o,x)
	local vX = o.x - self.x
	local vY = o.y - self.y
	local vZ = o.z - self.z
	if vX * vX < 1.0000000116860974e-7 then
		return nil
	else
		local nMul = (x - self.x) / vX
		return(
			(nMul >= 0 and nMul <= 1) and
			Vector:new(self.x + vX * nMul,
						self.y + vY * nMul,
						self.z + vZ * nMul)
			or nil)
	end
end

function Vector:getIntermediateWithY(o,v)
	local vX = o.x - self.x
	local vY = o.y - self.y
	local vZ = o.z - self.z
	if vY * vY < 1.0000000116860974e-7 then
		return nil
	else
		local nMul = (v - self.y) / vY
		return (
			(nMul >= 0 and nMul <= 1)
			and Vector:new(
				self.x + vX * nMul,
				self.y + vY * nMul,
				self.z + vZ * nMul)
				or nil)
	end
end

function Vector:getIntermediateWithZ(o,v)
	local vX = o.x - self.x
	local vY = o.y - self.y
	local vZ = o.z - self.z
	if vZ * vZ < 1.0000000116860974e-7 then
		return nil
	else
		local nMul = (v - self.z) / vZ
		return(
			(nMul >= 0 and nMul<= 1)
			and Vector:new(
				self.x + vX * nMul,
				self.y + vY * nMul,
				self.z + vZ * nMul)
			or nil)
	end
end

function Vector:rotateAroundX(n)
	local c,s = math.cos(n), math.sin(n)
	return Vector:new(
			self.x,
			self.y * c + self.z * s,
			self.z * c - self.y * s)
end

function Vector:rotateAroundY(n)
	local c,s = math.cos(n), math.sin(n)
	return Vector:new(
			self.x * c + self.z * s,
			self.y,
			self.z * c - self.x * s)
end

function Vector:rotateAroundZ(n)
	local c,s = math.cos(n), math.sin(n)
	return Vector:new(
			self.x*c + self.y * s,
			self.y * c - self.x * s,
			self.z)
end

function Vector:clone()
	return Vector:new(self.x,self.y,self.z)
end

function Vector:getMinimum(v)
	return Vector:new(
				math.min(self.x,v.x),
				math.min(self.y,v.y),
				math.min(self.z,v.z))
end

function Vector:getMaximum(v)
	return Vector:new(
				math.max(self.x,v.x),
				math.max(self.y,v.y),
				math.max(self.z,v.z))
end

function Vector:getMidpoint(v)
	return Vector:new(
			(self.x + v.x) / 2,
			(self.y + v.y) / 2,
			(self.z + v.z) / 2)
end


function Vector:equals(v)
	if not isVector(self) or not isVector(v) then return false end
	return ( self.x == v.x and self.y == v.y and self.z == v.z)
end

getType = function(v)
	if isVector(v) then
		return "vector"
	else
		return type(v)
	end
end

isVector = function(v)
	return getmetatable(v) == Vector
end

function new(x,y,z)
	return Vector:new(x,y,z)
end